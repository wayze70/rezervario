@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using System.Net
@using Microsoft.AspNetCore.Components.Authorization
@using Reservation.Shared.Common
@using Reservation.Web.Client.Components
@inject IAccountService AccountService
@inject AuthenticationStateProvider AuthStateProvider

@page "/registrace"

<PageTitle>Registrace</PageTitle>

<EditForm Model="@RegistrationUser" OnValidSubmit="@OnSubmit">
    <MudPaper Class="mx-auto my-10 pa-6" MaxWidth="500px">
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">
            Registrace
        </MudText>
        <MudTextField MaxLength="250" T="string" Label="Jméno" @bind-Value="RegistrationUser.FirstName" Required="true"/>
        <MudTextField MaxLength="250" T="string" Label="Příjmení" @bind-Value="RegistrationUser.LastName" Required="true"/>
        <EmailInput @bind-Value="RegistrationUser.Email" Variant="Variant.Text" Adornment="Adornment.None"/>
        <MudTextField T="string" Label="Heslo" InputType="InputType.Password" @bind-Value="RegistrationUser.Password"
                      Required="true" MaxLength="100"/>
        <MudStack Row="true" AlignItems="AlignItems.End">
            <MudTextField MaxLength="150" T="string" Label="Identifikátor" Value="RegistrationUser.Identifier"
                          ValueChanged="OnPathChange"
                          DebounceInterval="500" Required="true"/>
            <MudTooltip
                Text="Identifikátor je unikátní řetězec, který bude součástí adresy vašich událostí.
            Může to být například vaše jméno, název firmy nebo jiný stručný název."
                ShowOnClick="true">
                <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" Size="Size.Small"/>
            </MudTooltip>
        </MudStack>
        <MudStack Row="false" AlignItems="AlignItems.Center" Spacing="1">
            @if (IsPathFetching)
            {
                <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Color="Color.Info" Size="Size.Small"/>
            }
            else if (IsPathTaken || !IsPathValid)
            {
                <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error" Size="Size.Small"/>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Success"
                         Size="Size.Small"/>
            }
            @if (IsPathTaken)
            {
                <MudText Color="Color.Error">Tato adresa je již obsazená</MudText>
            }
            else if (!IsPathValid)
            {
                <MudText Color="Color.Error">Adresa obsahuje nepovolené znaky</MudText>
            }
        </MudStack>
        <DataAnnotationsValidator/>
        <MudButton Disabled="IsSubmitting" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                   FullWidth="true"
                   Class="mt-4">
            @if (IsSubmitting)
            {
                <MudProgressCircular Size="Size.Small" Color="Color.Inherit"/>
                <span style="margin-left: 8px;">Odesílání...</span>
            }
            else
            {
                @:Zaregistrovat se
            }
        </MudButton>
        <MudText Align="Align.Center" Class="mt-4">
            Už máte účet?
            <MudLink Href="@Constants.Routes.Login">Přihlašte se</MudLink>
        </MudText>
    </MudPaper>
</EditForm>

@code {
    RegistrationRequest RegistrationUser { get; set; } = new();
    bool IsPathTaken { get; set; }
    bool IsPathValid { get; set; } = true;
    bool IsPathFetching { get; set; } = false;
    bool IsSubmitting { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if ((await AuthStateProvider.GetAuthenticationStateAsync()).User.Identity?.IsAuthenticated == true)
        {
            Snackbar.Add("Jste již přihlášeni. Pokud se chcete přihlásti k jiné účtu, neprve se odhlašte.",
                Severity.Info);
            NavigationManager.NavigateTo("/");
        }
    }

    async Task OnSubmit()
    {
        if (IsPathTaken)
        {
            Snackbar.Add("Vyplněný identifikátor je již obsazen", Severity.Error);
            return;
        }

        if (!IsPathValid)
        {
            Snackbar.Add("Identifikátor obsahuje nepovolené znaky", Severity.Error);
            return;
        }

        if (!Utils.IsPasswordLongEnough(RegistrationUser.Password))
        {
            Snackbar.Add("Heslo musí být alespoň 6 znaků dlouhé", Severity.Error);
            return;
        }

        if (!Utils.TryProcessEmail(RegistrationUser.Email, out string email))
        {
            Snackbar.Add("Email nemá platný formát", Severity.Error);
            return;
        }

        IsSubmitting = true;
        RegistrationUser.Email = email;

        var response = await AuthService.RegisterAsync(RegistrationUser);

        switch (response)
        {
            case HttpStatusCode.OK:
                Snackbar.Add("Registrace proběhla úspěšně", Severity.Success);
                NavigationManager.NavigateTo(Constants.Routes.AccountRoute.Account);
                break;
            case HttpStatusCode.Conflict:
                Snackbar.Add("Vyplněný identifikátor je již obsazen", Severity.Error);
                break;
            case HttpStatusCode.BadRequest:
                Snackbar.Add("Heslo musí být alespoň 6 znaků dlouhé", Severity.Error);
                break;
            default:
                Snackbar.Add("Registrace se nezdařila", Severity.Error);
                break;
        }

        IsSubmitting = false;
    }

    private async Task OnPathChange(string newPath)
    {
        RegistrationUser.Identifier = newPath;
        if (string.IsNullOrWhiteSpace(RegistrationUser.Identifier))
        {
            IsPathValid = false;
            return;
        }

        IsPathFetching = true;

        if (Utils.IsPathValidate(RegistrationUser.Identifier))
        {
            IsPathValid = true;
            IsPathTaken = (await AccountService.IsPathTaken(new PathRequest { Path = RegistrationUser.Identifier })).Data;
        }
        else
        {
            IsPathValid = false;
        }

        IsPathFetching = false;
    }
}
