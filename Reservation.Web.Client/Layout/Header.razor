@using Microsoft.AspNetCore.Components.Authorization
@using Reservation.Shared.Authorization
@implements IDisposable
@inject NavigationManager NavigationManager
@inject GlobalState GlobalState
@inject IAccountService AccountService

<header class="bg-dark p-3">

    <div class="container">
        @if (GetIdentifier() == GlobalState.Identifier && IsReservationRoute)
        {
            <AuthorizeView Roles="@nameof(Role.Admin)">
                <Authorized>
                    <MudButton
                        Href="@Constants.Routes.AccountRoute.Account"
                        Variant="Variant.Outlined"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.VisibilityOff">
                        Zpět na správce
                    </MudButton>
                </Authorized>
            </AuthorizeView>
        }

        <div class="d-flex justify-content-between text-white">
            @if (IsReservationRoute)
            {
                <h1 class="my-auto">
                    <a class="text-white" href="@HomeRoute">@GlobalState.Title</a>
                </h1>
            }
            else
            {
                <h1 class="my-auto">
                    <a class="text-white" href="@Constants.Routes.Home">@Constants.AppName</a>
                </h1>
                <Navigation/>
            }
        </div>
    </div>
</header>

@code
{
    private string Uri => NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

    private bool IsReservationRoute => (Uri.StartsWith("rezervace", StringComparison.OrdinalIgnoreCase) ||
                                        Uri.StartsWith("zruseni-rezervace", StringComparison.OrdinalIgnoreCase));

    private string Path { get; set; } = string.Empty;
    private string HomeRoute { get; set; } = Constants.Routes.Home;

    private string GetIdentifier() => Uri.Split('/')
        switch
        {
            var segments when Uri.StartsWith("rezervace/", StringComparison.OrdinalIgnoreCase)
                              && segments.Length > 1 => segments[1].ToLower(),
            _ => string.Empty
        };

    private string GetHomeRoute()
    {
        string identifier = GetIdentifier();
        return string.IsNullOrEmpty(identifier) ? Constants.Routes.Home : Constants.Routes.Reservation(identifier);
    }


    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        GlobalState.OnStateChanged += StateHasChanged;
        HomeRoute = GetHomeRoute();
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdatePathAndTitle();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        GlobalState.OnStateChanged -= StateHasChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _ = InvokeAsync(async () =>
        {
            await UpdatePathAndTitle();
            StateHasChanged();
        });
    }

    private async Task UpdatePathAndTitle()
    {
        try
        {
            Path = string.Empty;
            if (Uri.StartsWith("rezervace/", StringComparison.OrdinalIgnoreCase))
            {
                string[] segments = Uri.Split('/');
                if (segments.Length > 1)
                {
                    Path = segments[1].ToLower();
                    var accountInfo = await AccountService.GetAccountDescription(Path);
                    if (accountInfo is { IsSuccess: true, Data: not null })
                    {
                        GlobalState.Title = accountInfo.Data.Organization;
                        GlobalState.Description = accountInfo.Data.Description;
                        GlobalState.ContactEmail = accountInfo.Data.ContactEmail;
                        return;
                    }
                }
            }

            if (!IsReservationRoute)
            {
                GlobalState.Title = Constants.AppName;
                GlobalState.Description = string.Empty;
                GlobalState.ContactEmail = string.Empty;
            }
        }
        catch (Exception)
        {
            GlobalState.Title = Constants.AppName;
            GlobalState.Description = string.Empty;
            GlobalState.ContactEmail = string.Empty;
        }
    }
}